
Numpy -- NumPy functions, as well as operations like indexing and slicing, will return views whenever possible

	ndarray creation
		
		numpy.array(object, dtype = None, copy = True, order = None, subok = False, ndmin = 0)
		-- order: C (row major) or F (column major) or A (any) (default)
		-- subok: By default, returned array forced to be a base class array. If true, sub-classes passed through
		--ndmin: Specifies minimum dimensions of resultant array

		# similar to numpy.array
		numpy.asarray((object,, dtype = None, order = None)

		# random values elements
		numpy.empty(shape, dtype = float, order = 'C')
			e.g. 	x = np.empty([3,2], dtype = int) 
		
		# 0 elements
		numpy.zeros(shape, dtype = float, order = 'C')

		# 1 elements
		numpy.ones(shape, dtype = None, order = 'C')

		numpy.frombuffer(buffer, dtype = float, count = -1, offset = 0)
		-- count: The number of items to read, default -1 means all data
		-- offset: The starting position to read from. Default is 0
		e.g.
			s = 'Hello World' 
			a = np.frombuffer(s, dtype = 'S1') 

		numpy.fromiter(iterable, dtype, count = -1)
		e.g.
			list = range(5) 
			it = iter(list)  
			x = np.fromiter(it, dtype = float) 
		
		numpy.arange(start, stop, step, dtype)

		numpy.linspace(start, stop, num, endpoint, retstep, dtype)
		-- num: The number of evenly spaced samples to be generated. Default is 50
		-- endpoint: True by default, hence the stop value is included in the sequence. If false, it is not included
		-- retstep: If true, returns samples and step between the consecutive numbers
		e.g.
			# [10.   12.5   15.   17.5  20.]
			x = np.linspace(10,20,5)

			# [10.   12.   14.   16.   18.]
			np.linspace(10,20, 5, endpoint = False)
			
			# (array([ 1.  ,  1.25,  1.5 ,  1.75,  2.  ]), 0.25)
			np.linspace(1,2,5, retstep = True)

		numpy.logspace(start, stop, num, endpoint, base, dtype)
		-- base: Base of log space, default is 10
		e.g.
			# [  10.  100.]
			a = np.logspace(1.0, 2.0, num = 2) 

		np.linspace( start, end, number of elements)
		np.arange(start, end, strike)

	date types
		int_: Default integer type (same as C long; normally either int64 or int32)
		intc: Identical to C int (normally int32 or int64)
		intp: Integer used for indexing (same as C ssize_t; normally either int32 or int64)

		e.g.
			 np.int_

			# '>' means that encoding is big-endian, int8, int16, int32, int64 can be replaced by equivalent string 'i1', 'i2','i4'
			dt = np.dtype('>i4') 

			# output: [10 20 30]
			dt = np.dtype([('age', np.int8)]) 
			a = np.array([(10,),(20,),(30,)], dtype = dt) 
			print a['age']

			# output: [('abc', 21, 50.0), ('xyz', 18, 75.0)]
			# 'S', 'a' − (byte-)string
			student = np.dtype([('name','S20'), ('age', 'i1'), ('marks', 'f4')]) 
			a = np.array([('abc', 21, 50),('xyz', 18, 75)], dtype = student) 
	
	ndarray.shape
		e.g.
			# output: (2, 3)
			a = np.array([[1,2,3],[4,5,6]]) 
			print a.shape
			
			# or a.reshape(1, -1, 6), -1 means whatever is needed
			a.shape=(1, -1, 6)

	ndarray.size: the total number of elements of the array. This is equal to the product of the elements of shape

	ndarray.itemsize
		e.g.
			# output: 4
			x = np.array([1,2,3,4,5], dtype = np.float32) 
			print x.itemsize

	ndarray.ndim: the number of axes (dimensions) of the array
	
	ndarray.data: the buffer containing the actual elements of the array

	ndarray.dtype

	ndarray.flat: return a flattened array

	slicing--returns a view of it and sometimes copy should be called after slicing if the original array is not required anymore
		a = np.arange(10) 
		# start end step
		s = slice(2,7,2) 
		# output: [2  4  6]
		print a[s]

		a = np.arange(10)
		b = a[2:7:2] 
		# [2  4  6]
		print b

		a = np.array([[1,2,3],[3,4,5],[4,5,6]]) 
		# dots (...) represent as many colons, output: [2 4 5] 
		print a[...,1]
		# second row, output: [3 4 5]
		print a[1,...]
		# output: [[2 3] [4 5] [5 6]]
		print a[...,1:]
		# x[4,...,5,:] equal to x[4,:,:,5,:]

		x = np.array([[1, 2], [3, 4], [5, 6]]) 
		# [1  4  5]
		y = x[[0,1,2], [0,1,0]] 

		x = np.array([[ 0,  1,  2],[ 3,  4,  5],[ 6,  7,  8],[ 9, 10, 11]]) 
		# output: [ 6  7  8  9 10 11] 
		print x[x > 5]
		# deep copy
		b = x[x > 5]

		a = np.array([np.nan, 1,2,np.nan,3,4,5]) 
		# remove NaN
		print a[~np.isnan(a)]

		palette = np.array([[0, 0, 0],         
                     		 	[255, 0, 0],       
                     			[0, 255, 0],      
                     			[0, 0, 255],       
                     			[255, 255, 255]])  
 		image = np.array([[0, 1, 2, 0],       
                  			[0, 3, 4, 0]])
 		palette[image]                         
		# array([[[  0,   0,   0],
        		#	[255,   0,   0],
        		#	[  0, 255,   0],
        		#	[  0,   0,   0]],
		#
       		#	[[  0,   0,   0],
        		#	[  0,   0, 255],
        		#	[255, 255, 255],
        		#	[  0,   0,   0]]])
		
		a = np.arange(12).reshape(3,4)
		# array([[ 0,  1,  2,  3],
       		#	[ 4,  5,  6,  7],
       		#	[ 8,  9, 10, 11]])
		i = np.array([[0, 1],                    # indices for the first dim of a
             			[1, 2]])
		 j = np.array([[2, 1],                   # indices for the second dim
	               		[3, 3]])
 		a[i, j]                                   	# i and j must have equal shape, the same as arr[(i, j)] -- i, j in a tuple
		#array([[ 2,  5],
       		#	[ 7, 11]])
		a[i, 2]			# OK
		a[:, j]			# OK
		b1 = np.array([False,True,True])
		b2 = np.array([True,False,True,False])
		a[b1,b2]			#OK, equal to a[b1.nonzero(), b2.nonzero()]
		
		a = np.arange(5)
		a[[0,0,2]]=[1,2,3]
		# array([2, 1, 3, 3, 4])

	boardcast: An input can be used in calculation, if its size in a particular dimension matches the output size or its value is exactly 1

	iterator
		for row in  b:
			print(row)

		np.nditer(): iterator of ndarray
			1. The order of iteration is chosen to match the memory layout of an array, without considering a particular ordering.
			2. But nditer object can be forced to use a specific order
				e.g.
					for x in np.nditer(a, order = 'F'):
			3. nditer object has another optional parameter called op_flags. Its default value is read-only, 
				but can be set to read-write or write-only mode
				e.g.
					for x in np.nditer(a, op_flags = ['readwrite']):
   						x[...] = 2*x

			4. ‘flags’parameter
				-- c_index: C_order index can be tracked
				-- f_index: Fortran_order index is tracked
				-- multi-index: Type of indexes with one per iteration can be tracked
				-- external_loop: Causes values given to be one-dimensional arrays with multiple values instead of zero-dimensional array
				
				e.g.
					a = np.arange(0,60,5) 
					# [[ 0 5 10 15]
 					#  [20 25 30 35]
 					#  [40 45 50 55]]
					a = a.reshape(3,4) 
					# output: [ 0 20 40] [ 5 25 45] [10 30 50] [15 35 55]
					for x in np.nditer(a, flags = ['external_loop'], order = 'F'):
  						print x

	ndarray.copy(order='C')
	
	ndarray * ndarray: element multiple

	numpy.reciprocal()

	numpy.amin(), numpy.amax()
		e.g.
			a = np.array([[3,7,5],[8,4,3],[2,4,9]]) 
			# min of axis 1, output: [3 3 2]
			print np.amin(a,1)
			# min of axis 0, output: [2 4 3]
			print np.amin(a,0)
			# output: 9
			print np.amax(a)

	numpy.argmax() and numpy.argmin(): return index

	numpy.ptp(): returns the range (maximum-minimum) of values along an axis.

	numpy.average()
		e.g.
			# output: 2.0
			print np.average([1,2,3, 4],weights = [4,3,2,1])	
			# also return sum of weight, output: (2.0, 10.0)
			print np.average([1,2,3, 4],weights = [4,3,2,1], returned = True)

	numpy.sort(a, axis, kind, order)
	--axis: The axis along which the array is to be sorted. If none, the array is flattened, sorting on the last axis
	-- kind: Default is quicksort
	-- order: If the array contains fields, the order of fields to be sorted

	e.g.
		dt = np.dtype([('name', 'S10'),('age', int)]) 
		a = np.array([("raju",21),("anil",25),("ravi", 17), ("amar",27)], dtype = dt) 
		print np.sort(a, order = 'name')

	numpy.argsort(): return sorted indexes
	
	numpy.lexsort()
		e.g.
			nm = ('r','a','b','c') 
			dv = ('x.', 'y.', 'z.', 'w.') 
			ind = np.lexsort((dv,nm)) 
			# output: ['a, y.', 'b, z.', 'c, w.', 'r, x.']
			print [nm[i] + ", " + dv[i] for i in ind]

	numpy.nonzero()
		e.g.
			# [[30 40 0]
 			#  [ 0 20 10]
 			#  [50 0 60]]
			a = np.array([[30,40,0],[0,20,10],[50,0,60]]) 
			output: (array([0, 0, 1, 1, 2, 2]), array([0, 1, 1, 2, 0, 2]))
			print np.nonzero (a)

	numpy.where()
		e.g.
			# [[ 0. 1. 2.]
 			#  [ 3. 4. 5.]
 			#  [ 6. 7. 8.]]
			x = np.arange(9.).reshape(3, 3) 
			# output: (array([1, 1, 2, 2, 2]), array([1, 2, 0, 1, 2]))
			print np.where(x > 3) 

	numpy.extract()
		e.g.
			x = np.arange(9.).reshape(3, 3) 
			# [[ True False True]
 			#  [False True False]
			#  [ True False True]]
			condition = np.mod(x,2) == 0 
			# output: [ 0. 2. 4. 6. 8.]
			print np.extract(condition, x)

	assignment, copy and view
		1. Simple assignments do not make the copy of array object. It uses the same id(),	e.g. id(object)
		2. Shallow Copy: ndarray.view() return a new array object 	e.g. a.view().flag.owndata #False
		3. Deep Copy: ndarray.copy()

	matrix: always two-dimensional
		numpy.asmatrix (object)
		numpy.matlib.empty(shape, dtype, order)
		numpy.matlib.zeros()
		numpy.matlib.ones()
		numpy.matlib.rand()
		numpy.matlib.identity()
		numpy.matlib.eye(n, M,k, dtype)
		-- n: The number of rows in the resulting matrix
		-- M: The number of columns, defaults to n
		-- k: Index of diagonal

			e.g.
				# [[ 0.  0.  0.  0.]
 				#  [ 1.  0.  0.  0.]
				#  [ 0.  1.  0.  0.]]
				np.matlib.eye(n = 3, M = 4, k = -1)
		
		numpy.dot(): equal to A @ B
			For 2-D vectors,  matrix multiplication. 
			For 1-D arrays,  inner product of the vectors. 
			For N-dimensional arrays,  sum product over the last axis of a and the second-last axis of b
		numpy.vdot()
			flattened element wise madd
		numpy.inner()
			returns the sum product over the last axes
		numpy.matmul()
			if dimension > 2, equivalent to numpy.dot()
		numpy.linalg.det()
		numpy.linalg.inv()
			return inverse of a matrix
		numpy.linalg.solve(A, b)
			return X that AX = b

	IO
		1. load() and save() functions handle /numPy binary files (with npy extension)
		2. loadtxt() and savetxt() functions handle normal text files

	stacking
		numpy.vstack((a, b)): stack over first axis
		numpy.hstack((a, b)): stack over second axis
		column_stack((a, b): stack matrix's column
		row_stack((a,b): equal vstack()
		r_[a, b, c, ...]: equal to vstack
		c_[a, b, c, ...]: equal to hstack
		concatenate((a, b), axis = 0)

	Splitting 
		hsplit(a, n): split along second axis
		hsplit(a, (x, y, z,...))
			e.g.
				from numpy.random import default_rng
				# [[7. 2. 6. 0. 4. 3.]
				#  [9. 3. 0. 1. 7. 1.]]
				a = np.floor(10*rg.random((2,12)))
				# [array([[7., 2.],[9., 3.]]), array([[6., 0.],[0., 1.]]), array([[4., 3.],[7., 1.]])]
				np.hsplit(a, 3)
				# [array([[7., 2., 6.],[9., 3., 0.]]), array([[0.],[1.]]), array([[4., 3.],[7., 1.]])]
				np.hsplit(a, (3, 4))
		vsplit()
		array_split(): allows one to specify along which axis to split

	numpy.ix_(a, b, c)
		e.g.
			x, y, z = np.ix_([1, 2], [3, 4], [5, 6])
			# x.shape -- (2, 1, 1)
			# y.shape -- (1, 2, 1)
			# z.shape -- (1, 1, 2)

	new dimension
		e.g.
			a = np.arange(6)
			b = a[np.newaxis, :]		# or b = np.expand_dims(a, axis = 0) 

	random
		e.g.
			rng = np.random.default.rng()
			rng.random()
			rng.random((3, 2))

			rng.integers(5, 13, size=(2, 4), endpoint=True)

	np.unique() -- If the axis argument isn’t passed, your 2D array will be flattened
		e.g.
			a = np.array([11, 11, 12, 13, 14, 15, 16, 17, 12, 13, 11, 14, 18, 19, 20])
			# [11 12 13 14 15 16 17 18 19 20]
			unique_values = np.unique(a)
			# indices_list: [ 0  2  3  4  5  6  7 12 13 14]
			unique_values, indices_list = np.unique(a, return_index=True)
			# occurrence_count: [3 2 2 2 1 1 1 1 1 1]
			unique_values, occurrence_count = np.unique(a, return_counts=True)

	np.flip(): reverse an array
		e.g.
			arr_2d = np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])
			reversed_arr = np.flip(arr_2d)
			#[[12 11 10  9]
 			# [ 8  7  6  5]
			# [ 4  3  2  1]]
			reversed_arr_columns = np.flip(arr_2d, axis=1)

	flatening
		numpy.flatten(object, order='C'): return copy
		numpy.ravel(objecct, order='C'): return view, but copy if needed